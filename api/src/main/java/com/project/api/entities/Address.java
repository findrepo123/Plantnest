package com.project.api.entities;
// Generated Jul 25, 2023, 8:08:56 PM by Hibernate Tools 4.3.6.Final

import com.project.api.dtos.AddressDTO;
import lombok.Data;
import lombok.Getter;
import lombok.Setter;

import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Address generated by hbm2java
 */
@Getter
@Setter
@Entity
@Table(name = "`address`")
public class Address implements java.io.Serializable {

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "address_id", unique = true, nullable = false)
	private Integer addressId;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "district_code")

	private District district;
	@ManyToOne(fetch = FetchType.LAZY)

	@JoinColumn(name = "province_code")
	private Province province;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ward_code")
	private Ward ward;

	@Column(name = "road_name")
	private String roadName;

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "`account_address`", joinColumns = {
			@JoinColumn(name = "address_id", nullable = false, updatable = false) }, inverseJoinColumns = {
			@JoinColumn(name = "account_id", nullable = false, updatable = false) })
	private Set<Account> accounts = new HashSet<Account>(0);

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "address")
	private Set<Order> orders = new HashSet<Order>(0);

	public Address() {
	}

	public Address(District district, Province province, Ward ward, String roadName, Set<Account> accounts,
			Set<Order> orders) {
		this.district = district;
		this.province = province;
		this.ward = ward;
		this.roadName = roadName;
		this.accounts = accounts;
		this.orders = orders;
	}

	public Address(AddressDTO addressDTO) {
		this.addressId = addressDTO.getAddressId();
		this.province = new Province(addressDTO.getProvince());
		this.district = new District(addressDTO.getDistrict());
		this.ward = new Ward(addressDTO.getWard());
		this.roadName = addressDTO.getRoadName();
	}


	@Override
	public String toString() {
		return roadName + ", " + ward.getFullName() + ", " +
				district.getFullName() + ", " + province.getFullName();
	}

	@Override
	public int hashCode() {
		return Objects.hash(addressId);
	}


}
